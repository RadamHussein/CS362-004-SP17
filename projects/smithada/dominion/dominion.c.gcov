        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/********************************* Begin: 5 Card Functions********************************/
        -:    9:
        -:   10:void adventurerFunction(int currentPlayer, struct gameState *state, int drawntreasure){
        -:   11:  int cardDrawn;
        -:   12:  int temphand[MAX_HAND];
        1:   13:  int z = 0;// this is the counter for the temp hand
        -:   14:
        8:   15:  while(drawntreasure<2){
        3:   16:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        3:   17:      shuffle(currentPlayer, state);
        3:   18:    }
        3:   19:    drawCard(currentPlayer, state);
        3:   20:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5:   21:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:   22:      drawntreasure++;
        -:   23:    else{
        1:   24:      temphand[z]=cardDrawn;
        1:   25:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:   26:      z++;
        -:   27:    }
        -:   28:  }
        6:   29:  while(z >=0){
        2:   30:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2:   31:    z=z-1;
        -:   32:  }
        1:   33:}
        -:   34:
        -:   35:void smithyFunction(int currentPlayer, int handPos, struct gameState *state){
        -:   36:  int i;
        -:   37:
    #####:   38:  for (i = 0; i <= 3; i++)
        -:   39:  {
    #####:   40:    drawCard(currentPlayer, state);
    #####:   41:  }
        -:   42:      
        -:   43:      //discard card from hand
    #####:   44:      discardCard(handPos, currentPlayer, state, 0);
    #####:   45:}
        -:   46:
        -:   47:int mineFunction(int currentPlayer, int choice1, int choice2, struct gameState *state, int handPos){
        -:   48:  int i;
        -:   49:  int j;
        -:   50:
    #####:   51:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   52:
    #####:   53:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:   54:  {
    #####:   55:    return -1;
        -:   56:  }
        -:   57:    
    #####:   58:  if (choice2 > treasure_map || choice2 < curse)
        -:   59:  {
    #####:   60:    return -1;
        -:   61:  }
        -:   62:
    #####:   63:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:   64:  {
    #####:   65:    return -1;
        -:   66:  }
        -:   67:
    #####:   68:  gainCard(choice2, state, 2, currentPlayer);
        -:   69:
        -:   70:  //discard card from hand
    #####:   71:  discardCard(handPos, currentPlayer, state, 0);
        -:   72:
        -:   73:  //discard trashed card
    #####:   74:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:   75:  {
    #####:   76:    if (state->hand[currentPlayer][i] == j)
        -:   77:      {
    #####:   78:        discardCard(i, currentPlayer, state, 0);      
    #####:   79:        break;
        -:   80:      }
    #####:   81:  }
        -:   82:      
    #####:   83:      return 0;
    #####:   84:}
        -:   85:
        -:   86:void minionFunction(int currentPlayer, int choice2, int choice1, struct gameState *state, int handPos){
        -:   87:  int i;
        -:   88:  int j;
        -:   89:
        -:   90:  //+1 action
    #####:   91:  state->numActions++;
        -:   92:      
        -:   93:  //discard card from hand
    #####:   94:  discardCard(handPos, currentPlayer, state, 0);
        -:   95:      
    #####:   96:  if (choice1)    //+2 coins
        -:   97:  {
    #####:   98:    state->coins = state->coins + 2;
    #####:   99:  }
    #####:  100:  else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  101:  {
        -:  102:    //discard hand
    #####:  103:    while(numHandCards(state) > 0)
        -:  104:    {
    #####:  105:      discardCard(handPos, currentPlayer, state, 0);
        -:  106:    }
        -:  107:        
        -:  108:    //draw 4
    #####:  109:    for (i = 0; i < 4; i++)
        -:  110:    {
    #####:  111:      drawCard(currentPlayer, state);
    #####:  112:    }
        -:  113:        
        -:  114:    //other players discard hand and redraw if hand size > 4
    #####:  115:    for (i = 0; i < state->numPlayers; i++)
        -:  116:    {
    #####:  117:        if (i != currentPlayer)
        -:  118:        {
    #####:  119:          if ( state->handCount[i] > 4 )
        -:  120:          {
        -:  121:              //discard hand
    #####:  122:              while( state->handCount[i] > 0 )
        -:  123:              {
    #####:  124:                discardCard(handPos, i, state, 0);
        -:  125:              }
        -:  126:                  
        -:  127:              //draw 4
    #####:  128:              for (j = 0; j < 4; j++)
        -:  129:              {
    #####:  130:                drawCard(i, state);
    #####:  131:              }
    #####:  132:          }
    #####:  133:        }
    #####:  134:    }
        -:  135:        
    #####:  136:  }
    #####:  137:}
        -:  138:
        -:  139:int treasuremapFunction(int currentPlayer, struct gameState *state, int handPos){
        -:  140:  int index;
        -:  141:  int i;
        -:  142:
        -:  143:  //search hand for another treasure_map
    #####:  144:  index = -1;
    #####:  145:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  146:  {
    #####:  147:    if (state->hand[currentPlayer][i] == treasure_map)
        -:  148:      {
    #####:  149:        index = i;
    #####:  150:        break;
        -:  151:      }
    #####:  152:  }
    #####:  153:  if (index > -1)
        -:  154:  {
        -:  155:    //trash both treasure cards
    #####:  156:    discardCard(handPos, currentPlayer, state, 1);
    #####:  157:    discardCard(index, currentPlayer, state, 1);
        -:  158:
        -:  159:    //gain 4 Gold cards
    #####:  160:    for (i = 0; i < 4; i++)
        -:  161:      {
    #####:  162:        gainCard(gold, state, 1, currentPlayer);
    #####:  163:      }
        -:  164:        
        -:  165:    //return success
    #####:  166:    return 1;
        -:  167:  }
        -:  168:      
        -:  169:      //no second treasure_map found in hand
    #####:  170:      return -1;
    #####:  171:}
        -:  172:
        -:  173:/********************************* End: 5 Card Functions********************************/
        -:  174:
        -:  175:
        -:  176:
        -:  177:
        -:  178:int compare(const void* a, const void* b) {
       28:  179:  if (*(int*)a > *(int*)b)
    #####:  180:    return 1;
       28:  181:  if (*(int*)a < *(int*)b)
       10:  182:    return -1;
       18:  183:  return 0;
       28:  184:}
        -:  185:
        -:  186:struct gameState* newGame() {
    #####:  187:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  188:  return g;
        -:  189:}
        -:  190:
        -:  191:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  192:		  int k8, int k9, int k10) {
    #####:  193:  int* k = malloc(10 * sizeof(int));
    #####:  194:  k[0] = k1;
    #####:  195:  k[1] = k2;
    #####:  196:  k[2] = k3;
    #####:  197:  k[3] = k4;
    #####:  198:  k[4] = k5;
    #####:  199:  k[5] = k6;
    #####:  200:  k[6] = k7;
    #####:  201:  k[7] = k8;
    #####:  202:  k[8] = k9;
    #####:  203:  k[9] = k10;
    #####:  204:  return k;
        -:  205:}
        -:  206:
        -:  207:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  208:		   struct gameState *state) {
        -:  209:
        -:  210:  int i;
        -:  211:  int j;
        -:  212:  int it;			
        -:  213:  //set up random number generator
        1:  214:  SelectStream(1);
        1:  215:  PutSeed((long)randomSeed);
        -:  216:  
        -:  217:  //check number of players
        2:  218:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  219:    {
    #####:  220:      return -1;
        -:  221:    }
        -:  222:
        -:  223:  //set number of players
        1:  224:  state->numPlayers = numPlayers;
        -:  225:
        -:  226:  //check selected kingdom cards are different
       22:  227:  for (i = 0; i < 10; i++)
        -:  228:    {
      220:  229:      for (j = 0; j < 10; j++)
        -:  230:        {
      190:  231:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  232:	    {
    #####:  233:	      return -1;
        -:  234:	    }
      100:  235:        }
       10:  236:    }
        -:  237:
        -:  238:
        -:  239:  //initialize supply
        -:  240:  ///////////////////////////////
        -:  241:
        -:  242:  //set number of Curse cards
        1:  243:  if (numPlayers == 2)
        -:  244:    {
        1:  245:      state->supplyCount[curse] = 10;
        1:  246:    }
    #####:  247:  else if (numPlayers == 3)
        -:  248:    {
    #####:  249:      state->supplyCount[curse] = 20;
    #####:  250:    }
        -:  251:  else
        -:  252:    {
    #####:  253:      state->supplyCount[curse] = 30;
        -:  254:    }
        -:  255:
        -:  256:  //set number of Victory cards
        1:  257:  if (numPlayers == 2)
        -:  258:    {
        1:  259:      state->supplyCount[estate] = 8;
        1:  260:      state->supplyCount[duchy] = 8;
        1:  261:      state->supplyCount[province] = 8;
        1:  262:    }
        -:  263:  else
        -:  264:    {
    #####:  265:      state->supplyCount[estate] = 12;
    #####:  266:      state->supplyCount[duchy] = 12;
    #####:  267:      state->supplyCount[province] = 12;
        -:  268:    }
        -:  269:
        -:  270:  //set number of Treasure cards
        1:  271:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  272:  state->supplyCount[silver] = 40;
        1:  273:  state->supplyCount[gold] = 30;
        -:  274:
        -:  275:  //set number of Kingdom cards
       42:  276:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  277:    {
      330:  278:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  279:    	{
      155:  280:    	  if (kingdomCards[j] == i)
        -:  281:    	  {
        -:  282:    	      //check if card is a 'Victory' Kingdom card
       19:  283:    	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  284:    		    {
        2:  285:        		  if (numPlayers == 2){ 
        2:  286:        		    state->supplyCount[i] = 8; 
        2:  287:        		  }
        -:  288:    		      else{ 
    #####:  289:                state->supplyCount[i] = 12; 
        -:  290:              }
        2:  291:    		    }
        -:  292:    	      else
        -:  293:    		    {
        8:  294:    		      state->supplyCount[i] = 10;
        -:  295:    		    }
       10:  296:    	      break;
        -:  297:    	  }
        -:  298:    	  else    //card is not in the set choosen for the game
        -:  299:    	  {
      145:  300:    	     state->supplyCount[i] = -1;
        -:  301:    	  }
      145:  302:    	}
       20:  303:    }
        -:  304:
        -:  305:  ////////////////////////
        -:  306:  //supply intilization complete
        -:  307:
        -:  308:  //set player decks
        6:  309:  for (i = 0; i < numPlayers; i++)
        -:  310:    {
        2:  311:      state->deckCount[i] = 0;
       16:  312:      for (j = 0; j < 3; j++)
        -:  313:    	{
        6:  314:    	  state->deck[i][j] = estate;
        6:  315:    	  state->deckCount[i]++;
        6:  316:    	}
       32:  317:      for (j = 3; j < 10; j++)
        -:  318:    	{
       14:  319:    	  state->deck[i][j] = copper;
       14:  320:    	  state->deckCount[i]++;		
       14:  321:    	}
        2:  322:    }
        -:  323:
        -:  324:  //shuffle player decks
        6:  325:  for (i = 0; i < numPlayers; i++)
        -:  326:    {
        2:  327:      if ( shuffle(i, state) < 0 )
        -:  328:	{
    #####:  329:	  return -1;
        -:  330:	}
        2:  331:    }
        -:  332:
        -:  333:  //draw player hands
        6:  334:  for (i = 0; i < numPlayers; i++)
        -:  335:    {  
        -:  336:      //initialize hand size to zero
        2:  337:      state->handCount[i] = 0;
        2:  338:      state->discardCount[i] = 0;
        -:  339:      //draw 5 cards
       24:  340:      for (j = 0; j < 5; j++)
        -:  341:      {
       10:  342:      	  drawCard(i, state);
       10:  343:      }
        2:  344:    }
        -:  345:  
        -:  346:  //set embargo tokens to 0 for all supply piles
       56:  347:  for (i = 0; i <= treasure_map; i++)
        -:  348:    {
       27:  349:      state->embargoTokens[i] = 0;
       27:  350:    }
        -:  351:
        -:  352:  //initialize first player's turn
        1:  353:  state->outpostPlayed = 0;
        1:  354:  state->phase = 0;
        1:  355:  state->numActions = 1;
        1:  356:  state->numBuys = 1;
        1:  357:  state->playedCardCount = 0;
        1:  358:  state->whoseTurn = 0;
        1:  359:  state->handCount[state->whoseTurn] = 0;
        -:  360:  //int it; move to top
        -:  361:
        -:  362:  //Moved draw cards to here, only drawing at the start of a turn
       12:  363:  for (it = 0; it < 5; it++){
        5:  364:    drawCard(state->whoseTurn, state);
        5:  365:  }
        -:  366:
        1:  367:  updateCoins(state->whoseTurn, state, 0);
        -:  368:
        1:  369:  return 0;
        1:  370:}
        -:  371:
        -:  372:int shuffle(int player, struct gameState *state) {
        -:  373: 
        -:  374:
        -:  375:  int newDeck[MAX_DECK];
        8:  376:  int newDeckPos = 0;
        -:  377:  int card;
        -:  378:  int i;
        -:  379:
        8:  380:  if (state->deckCount[player] < 1)
        6:  381:    return -1;
        2:  382:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  383:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  384:
       44:  385:  while (state->deckCount[player] > 0) {
       20:  386:    card = floor(Random() * state->deckCount[player]);
       20:  387:    newDeck[newDeckPos] = state->deck[player][card];
       20:  388:    newDeckPos++;
      114:  389:    for (i = card; i < state->deckCount[player]-1; i++) {
       37:  390:      state->deck[player][i] = state->deck[player][i+1];
       37:  391:    }
       20:  392:    state->deckCount[player]--;
        -:  393:  }
       44:  394:  for (i = 0; i < newDeckPos; i++) {
       20:  395:    state->deck[player][i] = newDeck[i];
       20:  396:    state->deckCount[player]++;
       20:  397:  }
        -:  398:
        2:  399:  return 0;
        8:  400:}
        -:  401:
        -:  402:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  403:{	
        -:  404:  int card;
    #####:  405:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  406:
        -:  407:  //check if it is the right phase
    #####:  408:  if (state->phase != 0)
        -:  409:    {
    #####:  410:      return -1;
        -:  411:    }
        -:  412:	
        -:  413:  //check if player has enough actions
    #####:  414:  if ( state->numActions < 1 )
        -:  415:    {
    #####:  416:      return -1;
        -:  417:    }
        -:  418:	
        -:  419:  //get card played
    #####:  420:  card = handCard(handPos, state);
        -:  421:	
        -:  422:  //check if selected card is an action
    #####:  423:  if ( card < adventurer || card > treasure_map )
        -:  424:    {
    #####:  425:      return -1;
        -:  426:    }
        -:  427:	
        -:  428:  //play card
    #####:  429:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  430:    {
    #####:  431:      return -1;
        -:  432:    }
        -:  433:	
        -:  434:  //reduce number of actions
    #####:  435:  state->numActions--;
        -:  436:
        -:  437:  //update coins (Treasure cards may be added with card draws)
    #####:  438:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  439:	
    #####:  440:  return 0;
    #####:  441:}
        -:  442:
        -:  443:int buyCard(int supplyPos, struct gameState *state) {
        -:  444:  int who;
        -:  445:  if (DEBUG){
        -:  446:    printf("Entering buyCard...\n");
        -:  447:  }
        -:  448:
        -:  449:  // I don't know what to do about the phase thing.
        -:  450:
    #####:  451:  who = state->whoseTurn;
        -:  452:
    #####:  453:  if (state->numBuys < 1){
        -:  454:    if (DEBUG)
        -:  455:      printf("You do not have any buys left\n");
    #####:  456:    return -1;
    #####:  457:  } else if (supplyCount(supplyPos, state) <1){
        -:  458:    if (DEBUG)
        -:  459:      printf("There are not any of that type of card left\n");
    #####:  460:    return -1;
    #####:  461:  } else if (state->coins < getCost(supplyPos)){
        -:  462:    if (DEBUG) 
        -:  463:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  464:    return -1;
        -:  465:  } else {
    #####:  466:    state->phase=1;
        -:  467:    //state->supplyCount[supplyPos]--;
    #####:  468:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  469:  
    #####:  470:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  471:    state->numBuys--;
        -:  472:    if (DEBUG)
        -:  473:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  474:  }
        -:  475:
        -:  476:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  477:  //state->discardCount[who]++;
        -:  478:    
    #####:  479:  return 0;
    #####:  480:}
        -:  481:
        -:  482:int numHandCards(struct gameState *state) {
    #####:  483:  return state->handCount[ whoseTurn(state) ];
        -:  484:}
        -:  485:
        -:  486:int handCard(int handPos, struct gameState *state) {
    #####:  487:  int currentPlayer = whoseTurn(state);
    #####:  488:  return state->hand[currentPlayer][handPos];
        -:  489:}
        -:  490:
        -:  491:int supplyCount(int card, struct gameState *state) {
    #####:  492:  return state->supplyCount[card];
        -:  493:}
        -:  494:
        -:  495:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  496:  int i;
    #####:  497:  int count = 0;
        -:  498:
    #####:  499:  for (i = 0; i < state->deckCount[player]; i++)
        -:  500:    {
    #####:  501:      if (state->deck[player][i] == card) count++;
    #####:  502:    }
        -:  503:
    #####:  504:  for (i = 0; i < state->handCount[player]; i++)
        -:  505:    {
    #####:  506:      if (state->hand[player][i] == card) count++;
    #####:  507:    }
        -:  508:
    #####:  509:  for (i = 0; i < state->discardCount[player]; i++)
        -:  510:    {
    #####:  511:      if (state->discard[player][i] == card) count++;
    #####:  512:    }
        -:  513:
    #####:  514:  return count;
        -:  515:}
        -:  516:
        -:  517:int whoseTurn(struct gameState *state) {
    #####:  518:  return state->whoseTurn;
        -:  519:}
        -:  520:
        -:  521:int endTurn(struct gameState *state) {
        -:  522:  int k;
        -:  523:  int i;
    #####:  524:  int currentPlayer = whoseTurn(state);
        -:  525:  
        -:  526:  //Discard hand
    #####:  527:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  528:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  529:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  530:  }
    #####:  531:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  532:    
        -:  533:  //Code for determining the player
    #####:  534:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  535:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  536:  }
        -:  537:  else{
    #####:  538:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  539:  }
        -:  540:
    #####:  541:  state->outpostPlayed = 0;
    #####:  542:  state->phase = 0;
    #####:  543:  state->numActions = 1;
    #####:  544:  state->coins = 0;
    #####:  545:  state->numBuys = 1;
    #####:  546:  state->playedCardCount = 0;
    #####:  547:  state->handCount[state->whoseTurn] = 0;
        -:  548:
        -:  549:  //int k; move to top
        -:  550:  //Next player draws hand
    #####:  551:  for (k = 0; k < 5; k++){
    #####:  552:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  553:  }
        -:  554:
        -:  555:  //Update money
    #####:  556:  updateCoins(state->whoseTurn, state , 0);
        -:  557:
    #####:  558:  return 0;
        -:  559:}
        -:  560:
        -:  561:int isGameOver(struct gameState *state) {
        -:  562:  int i;
        -:  563:  int j;
        -:  564:	
        -:  565:  //if stack of Province cards is empty, the game ends
    #####:  566:  if (state->supplyCount[province] == 0)
        -:  567:    {
    #####:  568:      return 1;
        -:  569:    }
        -:  570:
        -:  571:  //if three supply pile are at 0, the game ends
    #####:  572:  j = 0;
    #####:  573:  for (i = 0; i < 25; i++)
        -:  574:  {
    #####:  575:      if (state->supplyCount[i] == 0)
        -:  576:	     {
    #####:  577:	       j++;
    #####:  578:	     }
    #####:  579:  }
        -:  580:
    #####:  581:  if ( j >= 3)
        -:  582:  {
    #####:  583:      return 1;
        -:  584:  }
        -:  585:
    #####:  586:  return 0;
    #####:  587:}
        -:  588:
        -:  589:int scoreFor (int player, struct gameState *state) {
        -:  590:
        -:  591:  int i;
    #####:  592:  int score = 0;
        -:  593:  //score from hand
    #####:  594:  for (i = 0; i < state->handCount[player]; i++)
        -:  595:    {
    #####:  596:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  597:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  598:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  599:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  600:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  601:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  602:    }
        -:  603:
        -:  604:  //score from discard
    #####:  605:  for (i = 0; i < state->discardCount[player]; i++)
        -:  606:    {
    #####:  607:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  608:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  609:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  610:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  611:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  612:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  613:    }
        -:  614:
        -:  615:  //score from deck
    #####:  616:  for (i = 0; i < state->discardCount[player]; i++)
        -:  617:    {
    #####:  618:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  619:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  620:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  621:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  622:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  623:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  624:    }
        -:  625:
    #####:  626:  return score;
        -:  627:}
        -:  628:
        -:  629:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  630:  int i;	
        -:  631:  int j;
        -:  632:  int highScore;
        -:  633:  int currentPlayer;
        -:  634:
        -:  635:  //get score for each player
    #####:  636:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  637:    {
        -:  638:      //set unused player scores to -9999
    #####:  639:      if (i >= state->numPlayers)
        -:  640:	{
    #####:  641:	  players[i] = -9999;
    #####:  642:	}
        -:  643:      else
        -:  644:	{
    #####:  645:	  players[i] = scoreFor (i, state);
        -:  646:	}
    #####:  647:    }
        -:  648:
        -:  649:  //find highest score
    #####:  650:  j = 0;
    #####:  651:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  652:    {
    #####:  653:      if (players[i] > players[j])
        -:  654:	{
    #####:  655:	  j = i;
    #####:  656:	}
    #####:  657:    }
    #####:  658:  highScore = players[j];
        -:  659:
        -:  660:  //add 1 to players who had less turns
    #####:  661:  currentPlayer = whoseTurn(state);
    #####:  662:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  663:    {
    #####:  664:      if ( players[i] == highScore && i > currentPlayer )
        -:  665:	{
    #####:  666:	  players[i]++;
    #####:  667:	}
    #####:  668:    }
        -:  669:
        -:  670:  //find new highest score
    #####:  671:  j = 0;
    #####:  672:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  673:    {
    #####:  674:      if ( players[i] > players[j] )
        -:  675:	{
    #####:  676:	  j = i;
    #####:  677:	}
    #####:  678:    }
    #####:  679:  highScore = players[j];
        -:  680:
        -:  681:  //set winners in array to 1 and rest to 0
    #####:  682:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  683:    {
    #####:  684:      if ( players[i] == highScore )
        -:  685:	{
    #####:  686:	  players[i] = 1;
    #####:  687:	}
        -:  688:      else
        -:  689:	{
    #####:  690:	  players[i] = 0;
        -:  691:	}
    #####:  692:    }
        -:  693:
    #####:  694:  return 0;
        -:  695:}
        -:  696:
        -:  697:int drawCard(int player, struct gameState *state)
        -:  698:{	int count;
        -:  699:  int deckCounter;
       18:  700:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  701:    
        -:  702:    //Step 1 Shuffle the discard pile back into a deck
        -:  703:    int i;
        -:  704:    //Move discard to deck
        6:  705:    for (i = 0; i < state->discardCount[player];i++){
    #####:  706:      state->deck[player][i] = state->discard[player][i];
    #####:  707:      state->discard[player][i] = -1;
    #####:  708:    }
        -:  709:
        3:  710:    state->deckCount[player] = state->discardCount[player];
        3:  711:    state->discardCount[player] = 0;//Reset discard
        -:  712:
        -:  713:    //Shufffle the deck
        3:  714:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  715:   
        -:  716:    if (DEBUG){//Debug statements
        -:  717:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  718:    }
        -:  719:    
        3:  720:    state->discardCount[player] = 0;
        -:  721:
        -:  722:    //Step 2 Draw Card
        3:  723:    count = state->handCount[player];//Get current player's hand count
        -:  724:    
        -:  725:    if (DEBUG){//Debug statements
        -:  726:      printf("Current hand count: %d\n", count);
        -:  727:    }
        -:  728:    
        3:  729:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  730:
        3:  731:    if (deckCounter == 0)
        3:  732:      return -1;
        -:  733:
    #####:  734:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  735:    state->deckCount[player]--;
    #####:  736:    state->handCount[player]++;//Increment hand count
    #####:  737:  }
        -:  738:
        -:  739:  else{
       15:  740:    int count = state->handCount[player];//Get current hand count for player
        -:  741:    int deckCounter;
        -:  742:    if (DEBUG){//Debug statements
        -:  743:      printf("Current hand count: %d\n", count);
        -:  744:    }
        -:  745:
       15:  746:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  747:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  748:    state->deckCount[player]--;
       15:  749:    state->handCount[player]++;//Increment hand count
        -:  750:  }
        -:  751:
       15:  752:  return 0;
       18:  753:}
        -:  754:
        -:  755:int getCost(int cardNumber)
        -:  756:{
    #####:  757:  switch( cardNumber ) 
        -:  758:    {
        -:  759:    case curse:
    #####:  760:      return 0;
        -:  761:    case estate:
    #####:  762:      return 2;
        -:  763:    case duchy:
    #####:  764:      return 5;
        -:  765:    case province:
    #####:  766:      return 8;
        -:  767:    case copper:
    #####:  768:      return 0;
        -:  769:    case silver:
    #####:  770:      return 3;
        -:  771:    case gold:
    #####:  772:      return 6;
        -:  773:    case adventurer:
    #####:  774:      return 6;
        -:  775:    case council_room:
    #####:  776:      return 5;
        -:  777:    case feast:
    #####:  778:      return 4;
        -:  779:    case gardens:
    #####:  780:      return 4;
        -:  781:    case mine:
    #####:  782:      return 5;
        -:  783:    case remodel:
    #####:  784:      return 4;
        -:  785:    case smithy:
    #####:  786:      return 4;
        -:  787:    case village:
    #####:  788:      return 3;
        -:  789:    case baron:
    #####:  790:      return 4;
        -:  791:    case great_hall:
    #####:  792:      return 3;
        -:  793:    case minion:
    #####:  794:      return 5;
        -:  795:    case steward:
    #####:  796:      return 3;
        -:  797:    case tribute:
    #####:  798:      return 5;
        -:  799:    case ambassador:
    #####:  800:      return 3;
        -:  801:    case cutpurse:
    #####:  802:      return 4;
        -:  803:    case embargo: 
    #####:  804:      return 2;
        -:  805:    case outpost:
    #####:  806:      return 5;
        -:  807:    case salvager:
    #####:  808:      return 4;
        -:  809:    case sea_hag:
    #####:  810:      return 4;
        -:  811:    case treasure_map:
    #####:  812:      return 4;
        -:  813:    }
        -:  814:	
    #####:  815:  return -1;
    #####:  816:}
        -:  817:
        -:  818:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  819:{
        -:  820:  int i;
        -:  821:  int j;
        -:  822:  int k;
        -:  823:  int x;
        -:  824:  //int index;
    #####:  825:  int currentPlayer = whoseTurn(state);
    #####:  826:  int nextPlayer = currentPlayer + 1;
        -:  827:
    #####:  828:  int tributeRevealedCards[2] = {-1, -1};
        -:  829:  int temphand[MAX_HAND];// moved above the if statement
    #####:  830:  int drawntreasure=0;
        -:  831:  //int cardDrawn;
        -:  832:  //int z = 0;// this is the counter for the temp hand
    #####:  833:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  834:    nextPlayer = 0;
    #####:  835:  }
        -:  836:  
        -:  837:	
        -:  838:  //uses switch to select card and perform actions
    #####:  839:  switch( card ) 
        -:  840:    {
        -:  841:    case adventurer:
    #####:  842:      adventurerFunction(currentPlayer, state, drawntreasure);
    #####:  843:      return 0;
        -:  844:			
        -:  845:    case council_room:
        -:  846:      //+4 Cards
    #####:  847:      for (i = 0; i < 4; i++)
        -:  848:	{
    #####:  849:	  drawCard(currentPlayer, state);
    #####:  850:	}
        -:  851:			
        -:  852:      //+1 Buy
    #####:  853:      state->numBuys++;
        -:  854:			
        -:  855:      //Each other player draws a card
    #####:  856:      for (i = 0; i < state->numPlayers; i++)
        -:  857:	{
    #####:  858:	  if ( i != currentPlayer )
        -:  859:	    {
    #####:  860:	      drawCard(i, state);
    #####:  861:	    }
    #####:  862:	}
        -:  863:			
        -:  864:      //put played card in played card pile
    #####:  865:      discardCard(handPos, currentPlayer, state, 0);
        -:  866:			
    #####:  867:      return 0;
        -:  868:			
        -:  869:    case feast:
        -:  870:      //gain card with cost up to 5
        -:  871:      //Backup hand
    #####:  872:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  873:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  874:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  875:      }
        -:  876:      //Backup hand
        -:  877:
        -:  878:      //Update Coins for Buy
    #####:  879:      updateCoins(currentPlayer, state, 5);
    #####:  880:      x = 1;//Condition to loop on
    #####:  881:      while( x == 1) {//Buy one card
    #####:  882:	if (supplyCount(choice1, state) <= 0){
        -:  883:	  if (DEBUG)
        -:  884:	    printf("None of that card left, sorry!\n");
        -:  885:
        -:  886:	  if (DEBUG){
        -:  887:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  888:	  }
    #####:  889:	}
    #####:  890:	else if (state->coins < getCost(choice1)){
    #####:  891:	  printf("That card is too expensive!\n");
        -:  892:
        -:  893:	  if (DEBUG){
        -:  894:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  895:	  }
    #####:  896:	}
        -:  897:	else{
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  901:	  }
        -:  902:
    #####:  903:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  904:	  x = 0;//No more buying cards
        -:  905:
        -:  906:	  if (DEBUG){
        -:  907:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  908:	  }
        -:  909:
        -:  910:	}
        -:  911:      }     
        -:  912:
        -:  913:      //Reset Hand
    #####:  914:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  915:	state->hand[currentPlayer][i] = temphand[i];
    #####:  916:	temphand[i] = -1;
    #####:  917:      }
        -:  918:      //Reset Hand
        -:  919:      			
    #####:  920:      return 0;
        -:  921:			
        -:  922:    case gardens:
    #####:  923:      return -1;
        -:  924:			
        -:  925:    case mine:
    #####:  926:      k = mineFunction(currentPlayer, choice1, choice2, state, handPos);
    #####:  927:      return k;
        -:  928:			
        -:  929:    case remodel:
    #####:  930:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  931:
    #####:  932:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  933:	{
    #####:  934:	  return -1;
        -:  935:	}
        -:  936:
    #####:  937:      gainCard(choice2, state, 0, currentPlayer);
        -:  938:
        -:  939:      //discard card from hand
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
        -:  941:
        -:  942:      //discard trashed card
    #####:  943:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  944:	{
    #####:  945:	  if (state->hand[currentPlayer][i] == j)
        -:  946:	    {
    #####:  947:	      discardCard(i, currentPlayer, state, 0);			
    #####:  948:	      break;
        -:  949:	    }
    #####:  950:	}
        -:  951:
        -:  952:
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case smithy:
    #####:  956:      smithyFunction(currentPlayer, handPos, state);
    #####:  957:      return 0;
        -:  958:		
        -:  959:    case village:
        -:  960:      //+1 Card
    #####:  961:      drawCard(currentPlayer, state);
        -:  962:			
        -:  963:      //+2 Actions
    #####:  964:      state->numActions = state->numActions + 2;
        -:  965:			
        -:  966:      //discard played card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    #####:  968:      return 0;
        -:  969:		
        -:  970:    case baron:
    #####:  971:      state->numBuys++;//Increase buys by 1!
    #####:  972:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  973:	int p = 0;//Iterator for hand!
    #####:  974:	int card_not_discarded = 1;//Flag for discard set!
    #####:  975:	while(card_not_discarded){
    #####:  976:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  977:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  978:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  979:	    state->discardCount[currentPlayer]++;
    #####:  980:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  981:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  982:	    }
    #####:  983:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  984:	    state->handCount[currentPlayer]--;
    #####:  985:	    card_not_discarded = 0;//Exit the loop
    #####:  986:	  }
    #####:  987:	  else if (p > state->handCount[currentPlayer]){
        -:  988:	    if(DEBUG) {
        -:  989:	      printf("No estate cards in your hand, invalid choice\n");
        -:  990:	      printf("Must gain an estate if there are any\n");
        -:  991:	    }
    #####:  992:	    if (supplyCount(estate, state) > 0){
    #####:  993:	      gainCard(estate, state, 0, currentPlayer);
    #####:  994:	      state->supplyCount[estate]--;//Decrement estates
    #####:  995:	      if (supplyCount(estate, state) == 0){
    #####:  996:		isGameOver(state);
    #####:  997:	      }
    #####:  998:	    }
    #####:  999:	    card_not_discarded = 0;//Exit the loop
    #####: 1000:	  }
        -: 1001:			    
        -: 1002:	  else{
    #####: 1003:	    p++;//Next card
        -: 1004:	  }
        -: 1005:	}
    #####: 1006:      }
        -: 1007:			    
        -: 1008:      else{
    #####: 1009:	if (supplyCount(estate, state) > 0){
    #####: 1010:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1011:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1012:	  if (supplyCount(estate, state) == 0){
    #####: 1013:	    isGameOver(state);
    #####: 1014:	  }
    #####: 1015:	}
        -: 1016:      }
        -: 1017:	    
        -: 1018:      
    #####: 1019:      return 0;
        -: 1020:		
        -: 1021:    case great_hall:
        -: 1022:      //+1 Card
    #####: 1023:      drawCard(currentPlayer, state);
        -: 1024:			
        -: 1025:      //+1 Actions
    #####: 1026:      state->numActions++;
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case minion:
    #####: 1033:      minionFunction(currentPlayer, choice1, choice2, state, handPos);
    #####: 1034:      return 0;
        -: 1035:		
        -: 1036:    case steward:
    #####: 1037:      if (choice1 == 1)
        -: 1038:	{
        -: 1039:	  //+2 cards
    #####: 1040:	  drawCard(currentPlayer, state);
    #####: 1041:	  drawCard(currentPlayer, state);
    #####: 1042:	}
    #####: 1043:      else if (choice1 == 2)
        -: 1044:	{
        -: 1045:	  //+2 coins
    #####: 1046:	  state->coins = state->coins + 2;
    #####: 1047:	}
        -: 1048:      else
        -: 1049:	{
        -: 1050:	  //trash 2 cards in hand
    #####: 1051:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1052:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1053:	}
        -: 1054:			
        -: 1055:      //discard card from hand
    #####: 1056:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case tribute:
    #####: 1060:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1061:	if (state->deckCount[nextPlayer] > 0){
    #####: 1062:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1063:	  state->deckCount[nextPlayer]--;
    #####: 1064:	}
    #####: 1065:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1066:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1067:	  state->discardCount[nextPlayer]--;
    #####: 1068:	}
        -: 1069:	else{
        -: 1070:	  //No Card to Reveal
        -: 1071:	  if (DEBUG){
        -: 1072:	    printf("No cards to reveal\n");
        -: 1073:	  }
        -: 1074:	}
    #####: 1075:      }
        -: 1076:	    
        -: 1077:      else{
    #####: 1078:	if (state->deckCount[nextPlayer] == 0){
    #####: 1079:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1080:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1081:	    state->deckCount[nextPlayer]++;
    #####: 1082:	    state->discard[nextPlayer][i] = -1;
    #####: 1083:	    state->discardCount[nextPlayer]--;
    #####: 1084:	  }
        -: 1085:			    
    #####: 1086:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1087:	} 
    #####: 1088:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1089:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1090:	state->deckCount[nextPlayer]--;
    #####: 1091:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1092:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1093:	state->deckCount[nextPlayer]--;
        -: 1094:      }    
        -: 1095:		       
    #####: 1096:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1097:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1098:	state->playedCardCount++;
    #####: 1099:	tributeRevealedCards[1] = -1;
    #####: 1100:      }
        -: 1101:
    #####: 1102:      for (i = 0; i <= 2; i ++){
    #####: 1103:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1104:	  state->coins += 2;
    #####: 1105:	}
        -: 1106:		    
    #####: 1107:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1108:	  drawCard(currentPlayer, state);
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	}
        -: 1111:	else{//Action Card
    #####: 1112:	  state->numActions = state->numActions + 2;
        -: 1113:	}
    #####: 1114:      }
        -: 1115:	    
    #####: 1116:      return 0;
        -: 1117:		
        -: 1118:    case ambassador:
    #####: 1119:      j = 0;		//used to check if player has enough cards to discard
        -: 1120:
    #####: 1121:      if (choice2 > 2 || choice2 < 0)
        -: 1122:	{
    #####: 1123:	  return -1;				
        -: 1124:	}
        -: 1125:
    #####: 1126:      if (choice1 == handPos)
        -: 1127:	{
    #####: 1128:	  return -1;
        -: 1129:	}
        -: 1130:
    #####: 1131:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1132:	{
    #####: 1133:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1134:	    {
    #####: 1135:	      j++;
    #####: 1136:	    }
    #####: 1137:	}
    #####: 1138:      if (j < choice2)
        -: 1139:	{
    #####: 1140:	  return -1;				
        -: 1141:	}
        -: 1142:
        -: 1143:      if (DEBUG) 
        -: 1144:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1145:
        -: 1146:      //increase supply count for choosen card by amount being discarded
    #####: 1147:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1148:			
        -: 1149:      //each other player gains a copy of revealed card
    #####: 1150:      for (i = 0; i < state->numPlayers; i++)
        -: 1151:	{
    #####: 1152:	  if (i != currentPlayer)
        -: 1153:	    {
    #####: 1154:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1155:	    }
    #####: 1156:	}
        -: 1157:
        -: 1158:      //discard played card from hand
    #####: 1159:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1160:
        -: 1161:      //trash copies of cards returned to supply
    #####: 1162:      for (j = 0; j < choice2; j++)
        -: 1163:	{
    #####: 1164:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1165:	    {
    #####: 1166:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1167:		{
    #####: 1168:		  discardCard(i, currentPlayer, state, 1);
    #####: 1169:		  break;
        -: 1170:		}
    #####: 1171:	    }
    #####: 1172:	}			
        -: 1173:
    #####: 1174:      return 0;
        -: 1175:		
        -: 1176:    case cutpurse:
        -: 1177:
    #####: 1178:      updateCoins(currentPlayer, state, 2);
    #####: 1179:      for (i = 0; i < state->numPlayers; i++)
        -: 1180:	{
    #####: 1181:	  if (i != currentPlayer)
        -: 1182:	    {
    #####: 1183:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1184:		{
    #####: 1185:		  if (state->hand[i][j] == copper)
        -: 1186:		    {
    #####: 1187:		      discardCard(j, i, state, 0);
    #####: 1188:		      break;
        -: 1189:		    }
    #####: 1190:		  if (j == state->handCount[i])
        -: 1191:		    {
    #####: 1192:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1193:			{
        -: 1194:			  if (DEBUG)
        -: 1195:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1196:			}	
    #####: 1197:		      break;
        -: 1198:		    }		
    #####: 1199:		}
        -: 1200:					
    #####: 1201:	    }
        -: 1202:				
    #####: 1203:	}				
        -: 1204:
        -: 1205:      //discard played card from hand
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1207:
    #####: 1208:      return 0;
        -: 1209:
        -: 1210:		
        -: 1211:    case embargo: 
        -: 1212:      //+2 Coins
    #####: 1213:      state->coins = state->coins + 2;
        -: 1214:			
        -: 1215:      //see if selected pile is in play
    #####: 1216:      if ( state->supplyCount[choice1] == -1 )
        -: 1217:	{
    #####: 1218:	  return -1;
        -: 1219:	}
        -: 1220:			
        -: 1221:      //add embargo token to selected supply pile
    #####: 1222:      state->embargoTokens[choice1]++;
        -: 1223:			
        -: 1224:      //trash card
    #####: 1225:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case outpost:
        -: 1229:      //set outpost flag
    #####: 1230:      state->outpostPlayed++;
        -: 1231:			
        -: 1232:      //discard card
    #####: 1233:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1234:      return 0;
        -: 1235:		
        -: 1236:    case salvager:
        -: 1237:      //+1 buy
    #####: 1238:      state->numBuys++;
        -: 1239:			
    #####: 1240:      if (choice1)
        -: 1241:	{
        -: 1242:	  //gain coins equal to trashed card
    #####: 1243:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1244:	  //trash card
    #####: 1245:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1246:	}
        -: 1247:			
        -: 1248:      //discard card
    #####: 1249:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1250:      return 0;
        -: 1251:		
        -: 1252:    case sea_hag:
    #####: 1253:      for (i = 0; i < state->numPlayers; i++){
    #####: 1254:	if (i != currentPlayer){
    #####: 1255:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1256:	  state->discardCount[i]++;
    #####: 1257:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1258:	}
    #####: 1259:      }
    #####: 1260:      return 0;
        -: 1261:		
        -: 1262:    case treasure_map:
    #####: 1263:      k = treasuremapFunction(currentPlayer, state, handPos);
    #####: 1264:      return k;
        -: 1265:
        -: 1266:  return -1;
        -: 1267:  }
        -: 1268:
    #####: 1269:  return -1;
    #####: 1270:}      
        -: 1271:
        -: 1272:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1273:{
        -: 1274:	
        -: 1275:  //if card is not trashed, added to Played pile 
    #####: 1276:  if (trashFlag < 1)
        -: 1277:    {
        -: 1278:      //add card to played pile
    #####: 1279:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1280:      state->playedCardCount++;
    #####: 1281:    }
        -: 1282:	
        -: 1283:  //set played card to -1
    #####: 1284:  state->hand[currentPlayer][handPos] = -1;
        -: 1285:	
        -: 1286:  //remove card from player's hand
    #####: 1287:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1288:    {
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
    #####: 1291:    }
    #####: 1292:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1293:    {
        -: 1294:      //reduce number of cards in hand
    #####: 1295:      state->handCount[currentPlayer]--;
    #####: 1296:    }
        -: 1297:  else 	
        -: 1298:    {
        -: 1299:      //replace discarded card with last card in hand
    #####: 1300:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1301:      //set last card to -1
    #####: 1302:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:	
    #####: 1307:  return 0;
        -: 1308:}
        -: 1309:
        -: 1310:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1311:{
        -: 1312:  //Note: supplyPos is enum of choosen card
        -: 1313:	
        -: 1314:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1315:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1316:    {
    #####: 1317:      return -1;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //added card for [whoseTurn] current player:
        -: 1321:  // toFlag = 0 : add to discard
        -: 1322:  // toFlag = 1 : add to deck
        -: 1323:  // toFlag = 2 : add to hand
        -: 1324:
    #####: 1325:  if (toFlag == 1)
        -: 1326:    {
    #####: 1327:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1328:      state->deckCount[player]++;
    #####: 1329:    }
    #####: 1330:  else if (toFlag == 2)
        -: 1331:    {
    #####: 1332:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1333:      state->handCount[player]++;
    #####: 1334:    }
        -: 1335:  else
        -: 1336:    {
    #####: 1337:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1338:      state->discardCount[player]++;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //decrease number in supply pile
    #####: 1342:  state->supplyCount[supplyPos]--;
        -: 1343:	 
    #####: 1344:  return 0;
    #####: 1345:}
        -: 1346:
        -: 1347:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1348:{
        -: 1349:  int i;
        -: 1350:	
        -: 1351:  //reset coin count
        1: 1352:  state->coins = 0;
        -: 1353:
        -: 1354:  //add coins for each Treasure card in player's hand
       12: 1355:  for (i = 0; i < state->handCount[player]; i++)
        -: 1356:    {
        5: 1357:      if (state->hand[player][i] == copper)
        -: 1358:    	{
        3: 1359:    	  state->coins += 1;
        3: 1360:    	}
        2: 1361:      else if (state->hand[player][i] == silver)
        -: 1362:    	{
    #####: 1363:    	  state->coins += 2;
    #####: 1364:    	}
        2: 1365:      else if (state->hand[player][i] == gold)
        -: 1366:    	{
    #####: 1367:    	  state->coins += 3;
    #####: 1368:    	}	
        5: 1369:    }	
        -: 1370:
        -: 1371:  //add bonus
        1: 1372:  state->coins += bonus;
        -: 1373:
        1: 1374:  return 0;
        -: 1375:}
        -: 1376:
        -: 1377://end of dominion.c
        -: 1378:

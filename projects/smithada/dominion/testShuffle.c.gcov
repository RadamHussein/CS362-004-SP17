        -:    0:Source:testShuffle.c
        -:    0:Graph:testShuffle.gcno
        -:    0:Data:testShuffle.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include <assert.h>
        -:    4:#include <string.h>
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:void assertTrue(int value){
        1:    8:  if (value != -1){
        1:    9:    printf("Check return value: PASSED\n");
        1:   10:  }
        -:   11:  else{
    #####:   12:    printf("Check return value: FAILED\n");
        -:   13:  }
        1:   14:}
        -:   15:
        -:   16:int compare(const int* a, const int* b);
        -:   17:
        -:   18:int main () {
        -:   19:  struct gameState G;
        -:   20:  struct gameState G2;
        -:   21:  int i;
        -:   22:  int j;
        1:   23:  int numPlayers = 2;
        -:   24:  int ret;
        -:   25:
        -:   26:  // Initialize G.
        -:   27:
        1:   28:  G.deckCount[0] = 0;
        1:   29:  ret = shuffle(0, &G);
        -:   30:
        1:   31:  printf("Testing bad input: ");
        1:   32:  if (ret == -1){
        1:   33:    printf("PASSED\n");
        1:   34:  }
        -:   35:  else{
    #####:   36:    printf("FAILED\n");
        -:   37:  }
        -:   38:
        -:   39:
        -:   40:  //set player decks
        6:   41:  for (i = 0; i < numPlayers; i++)
        -:   42:    {
        2:   43:      G.deckCount[i] = 0;
       16:   44:      for (j = 0; j < 3; j++)
        -:   45:      {
        6:   46:        G.deck[i][j] = estate;
        6:   47:        G.deckCount[i]++;
        6:   48:      }
       32:   49:      for (j = 3; j < 10; j++)
        -:   50:      {
       14:   51:        G.deck[i][j] = copper;
       14:   52:        G.deckCount[i]++;    
       14:   53:      }
        2:   54:    }
        -:   55:
        -:   56:  //printf("%d\n", G.deckCount);
        -:   57:  //printf("%d\n", G.deck[0][3]);
        -:   58:
        1:   59:  memcpy (&G2, &G, sizeof(struct gameState));
        -:   60:
        1:   61:  ret = shuffle(0,&G);
        -:   62:
        1:   63:  if (G.deckCount[0] > 0) {
        1:   64:    assertTrue(ret);
        -:   65:    
        1:   66:    qsort ((G.deck[0]), G.deckCount[0], sizeof(int), compare);
        1:   67:    qsort ((G2.deck[0]), G2.deckCount[0], sizeof(int), compare);    
        1:   68:  } 
        -:   69:  else{
    #####:   70:    assertTrue(ret);
        -:   71:  }
        -:   72:
        1:   73:  if (memcmp(&G, &G2, sizeof(struct gameState)) == 0){
        1:   74:      printf("Structs are equal: TRUE\n");
        1:   75:  }
        -:   76:  else{
    #####:   77:    printf("Structs are equal: FALSE\n");
        -:   78:  } 
        -:   79:
        1:   80:}
